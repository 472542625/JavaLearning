读多写少的情况下性能高于重入锁


读读共享、写写互斥、读写互斥


读锁下多个线程可以并发访问


写锁时候只能顺序访问





package testThread;

import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;

public class readwirteLock {

	ReentrantReadWriteLock lock = new ReentrantReadWriteLock();
	ReadLock rlock = lock.readLock();
	WriteLock wlock = lock.writeLock();

	private void read() {

		try {
			rlock.lock();
			System.out.println("当前线程:" + Thread.currentThread().getName()
					+ "进入...");
			Thread.sleep(3000);
			System.out.println("当前线程:" + Thread.currentThread().getName()
					+ "退出...");
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {

			rlock.unlock();
		}

	}

	private void write() {

		try {
			wlock.lock();
			System.out.println("当前线程:" + Thread.currentThread().getName()
					+ "进入...");
			Thread.sleep(3000);
			System.out.println("当前线程:" + Thread.currentThread().getName()
					+ "退出...");
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {

			wlock.unlock();
		}

	}

	public static void main(String[] args) {
		final readwirteLock rw = new readwirteLock();
		Thread t1 = new Thread(new Runnable() {

			public void run() {
				rw.read();
			}
		}, "t1");

		// Thread t2 = new Thread(new Runnable() {
		//
		// public void run() {
		// rw.read();
		// }
		// }, "t2");

		Thread t3 = new Thread(new Runnable() {

			public void run() {
				rw.write();
			}
		}, "t3");

		t1.start();

		// t2.start();

		t3.start();

	}

}

// 当前线程:t1进入...
// 当前线程:t1退出...
// 当前线程:t3进入...
// 当前线程:t3退出...
