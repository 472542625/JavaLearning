package testThread;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Semaphore;

public class Semaphoretest {

	class SemaphoreRunnable implements Runnable {

		private final Semaphore semaphore;// 信号量
		private final int user;// 记录第几个用户

		SemaphoreRunnable(Semaphore semaphore, int user) {
			this.semaphore = semaphore;
			this.user = user;
		}

		public void run() {
			// TODO Auto-generated method stub
			try {
				semaphore.acquire();
				System.out.println("用户" + user + "进入窗口准备买票...");
				Thread.sleep((long) (Math.random() * 10000));
				System.out.println("用户" + user + "买票完成准备离开...");
				Thread.sleep((long) (Math.random() * 10000));
				System.out.println("用户" + user + "离开窗口...");

				semaphore.release();
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();// S
			}
		}
	}

	private void execute() {
		final Semaphore semaphore = new Semaphore(2);

		ExecutorService threadpool = Executors.newCachedThreadPool();

		for (int i = 0; i < 20; i++) {
			threadpool.execute(new SemaphoreRunnable(semaphore, (i + 1)));
		}
		threadpool.shutdown();
	}

	public static void main(String[] args) {
		Semaphoretest t = new Semaphoretest();
		t.execute();
	}
}





用户2进入窗口准备买票...
用户1进入窗口准备买票...
用户2买票完成准备离开...
用户1买票完成准备离开...
用户1离开窗口...
用户3进入窗口准备买票...
用户2离开窗口...
用户4进入窗口准备买票...
用户4买票完成准备离开...
用户3买票完成准备离开...
用户4离开窗口...
用户5进入窗口准备买票...
用户5买票完成准备离开...
用户3离开窗口...
用户6进入窗口准备买票...
用户6买票完成准备离开...
用户5离开窗口...
用户7进入窗口准备买票...
用户7买票完成准备离开...
用户6离开窗口...
用户8进入窗口准备买票...
用户7离开窗口...
用户9进入窗口准备买票...
用户8买票完成准备离开...
用户9买票完成准备离开...
